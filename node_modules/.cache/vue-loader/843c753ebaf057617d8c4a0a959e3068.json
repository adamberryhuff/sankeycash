{"remainingRequest":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/adam/Desktop/sankycash/src/components/Chart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/adam/Desktop/sankycash/src/components/Chart.vue","mtime":1598226934054},{"path":"/home/adam/Desktop/sankycash/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojc2Fua2V5IHsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OjMwMHB4Owp9Cg=="},{"version":3,"sources":["Chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJA;AACA;AACA;AACA","file":"Chart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t<div id=\"sankey\"></div>\n</template>\n\n<script>\nimport google from 'google';\nimport util from '../util.js';\n\nexport default {\n    name: 'Chart',\n    props: ['income', 'expenses', 'investments', 'g', 'n', 't'],\n    data () {\n        return {\n            // calculated values\n            gross: { label: 'Gross Income', value: this.g },\n            net: { label: 'Net Income', value: this.n },\n            tax: { label: 'Taxes', value: this.t },\n            remaining: { label: 'Index Funds', value: 0 },\n\n            // expenses and investments\n            spent: { label: 'Expenses', value: 0 },\n            saved: { label: 'Investments', value: 0 },\n\n            // chart rendering\n            chart: false,\n        }\n    },\n    mounted () {\n        google.charts.load('current', {'packages':['sankey']});\n        google.charts.setOnLoadCallback(() => {\n            this.chart = new google.visualization.DataTable();\n            this.chart.addColumn('string', 'From');\n            this.chart.addColumn('string', 'To');\n            this.chart.addColumn('number', 'Amount');\n            this.drawIncomeBreakdown();\n            this.drawExpensesBreakdown();\n            this.drawInvestmentBreakdown();\n\n            var canvas = document.getElementById('sankey');\n            var chart = new google.visualization.Sankey(canvas);\n            chart.draw(this.chart, this.getChartStyling());\n        });\n    },\n    methods: {\n        /**************************************************************\n         * Income\n         **************************************************************/\n        drawIncomeBreakdown: function () {\n            this.drawGrossIncome();\n            this.drawTaxes();\n            this.drawNetIncome();\n        },\n        // draw lines: income streams -> gross\n        // treat employee matches as separate income streams\n        drawGrossIncome: function () {\n            this.income.forEach(stream => {\n                this.addChartRow(stream, this.gross);\n                stream.exemptions.forEach(exemption => {\n                    if (exemption.match > 0) {\n                        var match = {label: exemption.label+' Match', value: exemption.match};\n                        this.addChartRow(match, this.gross);\n                    }\n                });\n            })\n        },\n        // draw line: gross -> taxes\n        // draw line: taxes -> taxes\n        drawTaxes: function () {\n            this.addChartRow(this.gross, this.tax);\n            var tax = { label: 'Tax', value: this.tax.value }\n            this.addChartRow(this.tax, tax);\n            this.tax = tax;\n        },\n        // draw line: gross -> net\n        drawNetIncome: function () {\n            this.remaining.value = this.net.value;\n            this.addChartRow(this.gross, this.net);\n        },\n        /**************************************************************\n         * Expenses\n         **************************************************************/\n        drawExpensesBreakdown: function () {\n            this.spent.value = this.expenses.reduce((acc, e) => acc + e.value, this.tax.value);\n            this.addChartRow(this.tax, this.spent);\n            this.expenses.forEach(expense => {\n                this.addChartRow(this.net, expense);\n                this.remaining.value -= expense.value;\n                this.addChartRow(expense, this.spent);\n            })\n        },\n        /**************************************************************\n         * Investments\n         **************************************************************/\n        drawInvestmentBreakdown: function () {\n            this.saved.value = this.remaining.value;\n            this.drawExemptions();\n            this.investments.forEach(investment => {\n                this.addChartRow(this.net, investment);\n                this.remaining.value -= investment.value;\n                this.addChartRow(investment, this.saved);\n            })\n            this.addChartRow(this.net, this.remaining);\n            this.addChartRow(this.remaining, this.saved);\n        },\n        drawExemptions: function () {\n            this.income.forEach(stream => {\n                stream.exemptions.forEach(exemption => {\n                    this.addChartRow(this.net, exemption);\n                    this.remaining.value -= exemption.value;\n                    this.addChartRow(exemption, this.saved);\n                });\n            })\n        },\n        /**************************************************************\n         * Chart Stuff\n         **************************************************************/\n        addChartRow: function (from, to) {\n            let value = Math.min(from.value, to.value);\n            from = from.label + ' (' + util.formatMoney(from.value) + ')';\n            to   = to.label   + ' (' + util.formatMoney(to.value) + ')';\n            this.chart.addRow([from, to, value]);\n        },\n        getChartStyling: function () {\n            let colors = [\n                '#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f',\n                '#cab2d6', '#ffff99', '#1f78b4', '#33a02c'\n            ];\n            return {\n                sankey: {\n                    node: {\n                        colors: colors,\n                        nodePadding: 7\n                    },\n                    link: {\n                        colorMode: 'gradient',\n                        colors: colors\n                    },\n                    iterations: 0,\n                },\n            }\n        }\n    }\n}\n</script>\n\n<style>\n#sankey {\n    width: 100%;\n    height:300px;\n}\n</style>\n\n"]}]}