{"remainingRequest":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/adam/Desktop/sankycash/src/components/Incomes/AddIncome.vue?vue&type=style&index=0&id=4182d00c&scoped=true&lang=css&","dependencies":[{"path":"/home/adam/Desktop/sankycash/src/components/Incomes/AddIncome.vue","mtime":1599244016887},{"path":"/home/adam/Desktop/sankycash/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmRlc2t0b3Atb25seS1pbmxpbmUgewogICAgZmxvYXQ6IHJpZ2h0OwogICAgbWFyZ2luLXRvcDozMHB4Owp9CgouZGVza3RvcC1vbmx5LWlubGluZSAucmVtb3ZlLWV4cGVuc2UgewogICAgcGFkZGluZy1sZWZ0OjVweDsKICAgIHBhZGRpbmctcmlnaHQ6MTdweDsKICAgIGNvbG9yOnJlZDsKfQoKLmJ0bi1vdXRsaW5lLWRhbmdlciB7CiAgICBtYXJnaW4tdG9wOjVweDsKfQoKLmJ0bi1vdXRsaW5lLXByaW1hcnkgewogICAgbWFyZ2luLXRvcDo1cHg7Cn0KCgo="},{"version":3,"sources":["AddIncome.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2TA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"AddIncome.vue","sourceRoot":"src/components/Incomes","sourcesContent":["<template>\n    <form v-on:keydown.enter.prevent=\"\">\n        <!-- income stream label -->\n        <div class=\"form-group\">\n            <label>{{ $t('common.chart_label') }}</label>\n            <input id=\"new-income-focus\" v-model=\"label\" type=\"text\" class=\"form-control\" :placeholder=\"$t('common.label')\" name=\"income-stream-label\">\n            <small class=\"form-text text-muted\">\n                {{ $t('incomes.chart_label_examples') }}\n            </small>\n        </div>\n\n        <!-- income stream amount -->\n        <div class=\"form-group\">\n            <label>{{ $t('common.gross_amount') }}</label>\n            <input type=\"number\" class=\"form-control\" min=\"1\" v-model=\"value\" :placeholder=\"$t('common.amount')\" v-on:keyup=\"processKeyPress\">\n            <small class=\"form-text text-muted\">\n                {{ $t('incomes.gross_amount_examples', { mode: mode }) }}\n            </small>\n        </div>\n\n        <!-- income stream tax rate -->\n        <div class=\"form-group\">\n            <label>{{ $t('common.tax_rate') }}</label>\n            <input type=\"number\" class=\"form-control\" step=\".001\" min=\"1\" max=\"100\" v-model=\"tax\" :placeholder=\"$t('common.tax')\" v-on:keyup=\"processKeyPress\">\n            <small class=\"form-text text-muted\">\n                {{ $t('incomes.tax_rate_examples') }}\n            </small>\n        </div>\n\n        <!-- exemptions question -->\n        {{ $t('incomes.exemptions_question') }}\n        <AddIncomeExemption\n            :exemptions=\"exemptions\"\n            :mode=\"mode\"\n            @addIncome=\"addIncome\"\n            @addExemption=\"addExemption\"\n            @removeExemption=\"removeExemption\"\n            @clearExemptions=\"clearExemptions\" />\n        <br>\n\n        <!-- deductions question -->\n        {{ $t('incomes.deductions_question') }}\n        <AddIncomeDeduction\n            :deductions=\"deductions\"\n            :mode=\"mode\"\n            @addIncome=\"addIncome\"\n            @addDeduction=\"addDeduction\"\n            @removeDeduction=\"removeDeduction\"\n            @clearDeductions=\"clearDeductions\" />\n\n        <!-- desktop buttons: save, delete, cancel -->\n        <div class=\"desktop-only-inline\">\n            <button class=\"btn btn-primary float-right\" v-on:keyup=\"processKeyPress\" v-on:click.enter.prevent=\"addIncome\">\n                {{ income ? $t('incomes.update') : $t('incomes.add') }}\n            </button>\n            <button v-if=\"income\" class=\"btn btn-link\" v-on:click.enter.prevent=\"cancelEditIncome\">\n                {{ $t('common.cancel') }}\n            </button>\n            <button v-if=\"income\" class=\"btn btn-link remove-expense\" v-on:click.enter.prevent=\"deleteIncome\">\n                {{ $t('common.delete') }}\n            </button>\n        </div>\n\n        <!-- mobile buttons: save, delete, cancel -->\n        <div class=\"mobile-only row\">\n            <br>\n            <button class=\"btn btn-primary col-sm-12\" v-on:keyup=\"processKeyPress\" v-on:click.enter.prevent=\"addIncome\">\n                {{ income ? $t('incomes.update') : $t('incomes.add') }}\n            </button>\n            <button v-if=\"income\" class=\"btn btn-outline-primary col-sm-12\" v-on:click.enter.prevent=\"cancelEditIncome\">\n                {{ $t('common.cancel') }}\n            </button>\n            <button v-if=\"income\" class=\"btn btn-outline-danger col-sm-12\" v-on:click.enter.prevent=\"deleteIncome\">\n                {{ $t('common.delete') }}\n            </button>\n        </div>\n    </form>\n</template>\n\n\n<script>\n\nimport AddIncomeExemption from './AddIncomeExemption.vue';\nimport AddIncomeDeduction from './AddIncomeDeduction.vue';\nimport util from '../../util.js';\n\nexport default {\n    name: 'AddIncome',\n    props: ['income', 'mode', 'unallocatedSum'],\n    components: {\n        AddIncomeExemption,\n        AddIncomeDeduction\n    },\n    data () {\n        return {\n            // new income stream\n            label: '',\n            value: '',\n            tax:   '',\n            exemptions: [],\n            deductions: [],\n\n            util: util\n        }\n    },\n    mounted () {\n        this.initNewIncome();\n    },\n    methods: {\n        addIncome: function (e) {\n            if (e) e.preventDefault();\n            this.normalizeIncome();\n            this.normalizeExemptions();\n            this.normalizeDeductions();\n            if (!this.validateIncome()) return;\n            this.validateExemptions();\n            this.validateDeductions();\n\n            // exemptions + deductions > income\n            let tax_free = this.exemptions.reduce((a, e) => a + e.value, 0);\n            tax_free = this.deductions.reduce((a, d) => a + d.value, tax_free);\n            if (tax_free > this.value) {\n                alert(this.$t('incomes.pretax_error'));\n                return false;\n            }\n\n            // add\n            this.$emit('addIncome', {\n                label: this.label,\n                tax: this.tax,\n                value: this.value,\n                exemptions: this.exemptions,\n                deductions: this.deductions\n            });\n\n            this.initNewIncome();\n        },\n        normalizeIncome: function () {\n            this.tax   = parseInt(this.tax);\n            this.value = parseInt(this.value);\n        },\n        validateIncome: function () {\n            // do we have budget to edit this income when lowering the income value?\n            if (this.income) {\n                let income = JSON.parse(JSON.stringify(this.income));\n                income.value = this.value;\n                var diff = util.getNet(this.income) - util.getNet(income);\n                if (diff > this.unallocatedSum) {\n                    alert(this.$t('incomes.reduction_error', {\n                        required_total: util.formatMoney(diff, this.mode),\n                        required_additional: util.formatMoney(diff-this.unallocatedSum, this.mode)\n                    }));\n                    return false;\n                }\n            }\n\n            // validate label, tax, and value\n            if (this.label == '') {\n                alert(this.$t('incomes.label_error'));\n                return false;\n            }\n            if (isNaN(this.tax) || this.tax < 1 || this.tax > 100) {\n                alert(this.$t('incomes.tax_error'));\n                return false;\n            }\n            if (isNaN(this.value) || this.value <= 0) {\n                alert(this.$t('incomes.value_error'));\n                return false;\n            }\n            return true;\n        },\n        cancelEditIncome: function () {\n            this.$emit('editIncome', false);\n        },\n        deleteIncome: function () {\n            let net = util.getNet(this.income);\n            net = net - this.income.exemptions.reduce((a, e) => a + e.value + e.match, 0);\n            if (net > this.unallocatedSum) {\n                alert(this.$t('incomes.deletion_error', {\n                    required_total: util.formatMoney(net, this.mode),\n                    required_additional: util.formatMoney(net-this.unallocatedSum, this.mode)\n                }));\n                return;\n            }\n            if (confirm(this.$t('incomes.deletion_confirmation'))) {\n                this.$emit('deleteIncome');\n            }\n        },\n        /************************************************************\n         * EXEMPTIONS\n         ************************************************************/\n        addExemption: function () {\n            this.exemptions.push({\n                label: '',\n                value: '',\n                match: '',\n                value_mode: 'currency',\n                match_mode: 'currency'\n            });\n        },\n        removeExemption: function (idx) {\n            var empty = !this.exemptions[idx].label;\n            empty = empty && !this.exemptions[idx].value;\n            empty = empty && !this.exemptions[idx].match;\n            if (empty || confirm(this.$t('incomes.exemption_confirmation'))) {\n                this.exemptions.splice(idx, 1);\n            }\n        },\n        clearExemptions: function () {\n            this.exemptions = [];\n        },\n        // convert % contribution and match to $\n        normalizeExemptions: function () {\n            for (var key in this.exemptions) {\n                let exemption = this.exemptions[key];\n                if (exemption.value_mode == 'percent') {\n                    exemption.value      = this.value * exemption.value / 100;\n                    exemption.value_mode = 'currency';\n                }\n                if (exemption.match_mode == 'percent') {\n                    exemption.match      = this.value * exemption.match / 100;\n                    exemption.match_mode = 'currency';\n                }\n            }\n        },\n        validateExemptions: function () {\n            this.exemptions.forEach(exemption => {\n                exemption.value = parseInt(exemption.value);\n                if (isNaN(exemption.value) || exemption.value < 0) {\n                    alert(this.$t('incomes.exemption_value_error'));\n                    throw this.$t('incomes.exemption_value_error');\n                }\n                exemption.match = parseInt(exemption.match);\n                if (isNaN(exemption.match) || exemption.match < 0) {\n                    alert(this.$t('incomes.exemption_match_error'));\n                    throw this.$t('incomes.exemption_match_error');\n                }\n            })\n        },\n        /************************************************************\n         * DEDUCTIONS\n         ************************************************************/\n        addDeduction: function () {\n            this.deductions.push({\n                label: '',\n                value: '',\n                value_mode: 'currency',\n            });\n        },\n        removeDeduction: function (idx) {\n            var empty = !this.deductions[idx].label && !this.deductions[idx].value;\n            if (empty || confirm(this.$t('incomes.deduction_confirmation'))) {\n                this.deductions.splice(idx, 1);\n            }\n        },\n        clearDeductions: function () {\n            this.deductions = [];\n        },\n        // convert % deductions to $\n        normalizeDeductions: function () {\n            for (var key in this.deductions) {\n                let deduction = this.deductions[key];\n                if (deduction.value_mode == 'percent') {\n                    deduction.value      = this.value * deduction.value / 100;\n                    deduction.value_mode = 'currency';\n                }\n            }\n        },\n        validateDeductions: function () {\n            this.deductions.forEach(deduction => {\n                deduction.value = parseInt(deduction.value);\n                if (isNaN(deduction.value) || deduction.value < 0) {\n                    alert(this.$t('incomes.deduction_value_error'));\n                    throw this.$t('incomes.deduction_value_error');\n                }\n            })\n        },\n        /************************************************************\n         * UTIL\n         ************************************************************/\n        initNewIncome: function () {\n            this.label      = '';\n            this.tax        = '';\n            this.value      = '';\n            this.exemptions = [];\n            this.deductions = [];\n            document.getElementById('new-income-focus').focus();\n        },\n        processKeyPress: function (event) {\n            if (event.keyCode == 13) this.addIncome();\n        }\n    },\n    watch: {\n        // set local scope values if someone clicks edit income\n        income: function () {\n            this.value      = this.income ? this.income.value : '';\n            this.label      = this.income ? this.income.label : '';\n            this.tax        = this.income ? this.income.tax : '';\n            this.exemptions = this.income ? this.income.exemptions : [];\n            this.deductions = this.income ? this.income.deductions : [];\n            if (this.exemptions.length) {\n                this.exemptions = JSON.parse(JSON.stringify(this.exemptions));\n            }\n            if (this.deductions.length) {\n                this.deductions = JSON.parse(JSON.stringify(this.deductions));\n            }\n        }\n    }\n}\n\n</script>\n\n\n<style scoped>\n\n.desktop-only-inline {\n    float: right;\n    margin-top:30px;\n}\n\n.desktop-only-inline .remove-expense {\n    padding-left:5px;\n    padding-right:17px;\n    color:red;\n}\n\n.btn-outline-danger {\n    margin-top:5px;\n}\n\n.btn-outline-primary {\n    margin-top:5px;\n}\n\n\n</style>"]}]}