{"remainingRequest":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/adam/Desktop/sankycash/src/components/Chart.vue?vue&type=style&index=0&id=1687023f&scoped=true&lang=css&","dependencies":[{"path":"/home/adam/Desktop/sankycash/src/components/Chart.vue","mtime":1598510644387},{"path":"/home/adam/Desktop/sankycash/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojc2Fua2V5IHsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OjMwMHB4Owp9CgouYnRuLWdyb3VwIHsKICAgIHBvc2l0aW9uOmZpeGVkOwogICAgYm90dG9tOjBweDsKICAgIGxlZnQ6MHB4OwogICAgei1pbmRleDoxMDAwMDsKICAgIGJvcmRlci1yYWRpdXM6Cn0KCi5idG4tc2Vjb25kYXJ5IHsKICAgIGJveC1zaGFkb3c6IDAgMCAwIC4ycmVtIHJnYmEoMTMwLDEzOCwxNDUsLjUpOwp9CgouYnRuLWdyb3VwIC5idG46Zmlyc3QtY2hpbGQgewogICAgYm9yZGVyLXJhZGl1czogMHJlbSAwcmVtIDByZW0gMHJlbSAhaW1wb3J0YW50Owp9Ci5idG4tZ3JvdXAgLmJ0bjpsYXN0LWNoaWxkIHsKICAgIGJvcmRlci1yYWRpdXM6IDByZW0gMC4yNXJlbSAwcmVtIDByZW0gIWltcG9ydGFudDsKfQoKLnN3aXRjaCB7CiAgICBtYXJnaW4tcmlnaHQ6MzBweDsKfQoKLmJ0bi1zZWNvbmRhcnkgewogICAgZm9udC13ZWlnaHQ6Ym9sZCAhaW1wb3J0YW50Owp9Cg=="},{"version":3,"sources":["Chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2PA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"Chart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div v-show=\"this.gross.value > 0\">\n        <div id=\"sankey\"></div>\n        <div style=\"position: relative;\" v-on:click=\"toggleMode()\">\n            <span class=\"float-right switch\">\n                <b><input type=\"checkbox\" id=\"mode-checkbox\" checked data-toggle=\"toggle\" data-size=\"md\" data-on=\"$\" data-off=\"%\" data-onstyle=\"secondary\" data-offstyle=\"secondary\"></b>\n            </span>\n        </div>\n        <div class=\"btn-group\" role=\"group\">\n            <button type=\"button\" class=\"btn btn-secondary\" v-on:click=\"viewChart()\" v-show=\"!atTop && chartShowing\">\n                <span class=\"fa fa-arrow-up\"> Chart</span>\n            </button>\n        </div>\n        <br>\n    </div>\n</template>\n\n<script>\nimport google from 'google';\nimport util from '../util.js';\nimport html2canvas from 'html2canvas';\n\nexport default {\n    name: 'Chart',\n    props: [\n        'chartShowing',\n        'itemizedIncomes', 'itemizedExpenses', 'itemizedInvestments',\n        'grossSum', 'netSum', 'taxSum', 'unallocatedSum', 'investmentSum', 'expenseSum'\n    ],\n    data () {\n        return {\n            // chart labels\n            gross:       { label: 'Gross Income', value: this.formatValue(this.grossSum)      },\n            net:         { label: 'Net Income',   value: this.formatValue(this.netSum)        },\n            tax:         { label: 'Taxes',        value: this.formatValue(this.taxSum)        },\n            unallocated: { label: 'Unallocated',  value: this.formatValue(this.unallocatedSum)},\n            expenses:    { label: 'Expenses',     value: this.formatValue(this.expenseSum)    },\n            investments: { label: 'Investments',  value: this.formatValue(this.investmentSum) },\n\n            // chart rendering\n            chart: false,\n            colors: 'gradient',\n            atTop: true,\n            mode: 'value',\n            percent: false\n        }\n    },\n    mounted () {\n        google.charts.load('current', {'packages':['sankey']});\n    },\n    created () {\n        window.addEventListener('scroll', this.handleScroll);\n    },\n    destroyed () {\n        window.removeEventListener('scroll', this.handleScroll);\n    },\n    watch: {\n        grossSum: function () {\n            this.gross.value = this.formatValue(this.grossSum);\n            if (this.gross.value != 0) this.render();\n        },\n        netSum: function () {\n            this.net.value = this.formatValue(this.netSum);\n            if (this.net.value != 0) this.render();\n        },\n        taxSum: function () {\n            this.tax.value = this.formatValue(this.taxSum);\n            if (this.tax.value != 0) this.render();\n        },\n        unallocatedSum: function () {\n            this.unallocated.value = this.formatValue(this.unallocatedSum);\n            if (this.unallocated.value != 0) this.render();\n        },\n        expenseSum: function () {\n            this.expenses.value = this.formatValue(this.expenseSum);\n            if (this.expenses.value != 0) this.render();\n        },\n        investmentSum: function () {\n            this.investments.value = this.formatValue(this.investmentSum);\n            if (this.investments.value != 0) this.render();\n        }\n    },\n    methods: {\n        render: function (download=false) {\n            window.$(function () {\n                window.$('[data-toggle=\"tooltip\"]').tooltip('dispose');\n                window.$('[data-toggle=\"tooltip\"]').tooltip('enable');\n            })\n            google.charts.setOnLoadCallback(() => {\n                this.chart = new google.visualization.DataTable();\n                this.chart.addColumn('string', 'From');\n                this.chart.addColumn('string', 'To');\n                this.chart.addColumn('number', 'Amount');\n                this.drawIncomeBreakdown();\n                this.drawExpensesBreakdown();\n                this.drawInvestmentBreakdown();\n\n                var canvas = document.getElementById('sankey');\n                var chart = new google.visualization.Sankey(canvas);\n                chart.draw(this.chart, this.getChartStyling());\n                if (download) this.downloadChart();\n            });\n        },\n        /**************************************************************\n         * Income\n         **************************************************************/\n        drawIncomeBreakdown: function () {\n            this.drawGrossIncome();\n            this.drawTaxes();\n            this.drawNetIncome();\n        },\n        // draw lines: income streams -> gross\n        // treat employee matches as separate income streams\n        drawGrossIncome: function () {\n            this.itemizedIncomes.forEach(stream => {\n                stream = JSON.parse(JSON.stringify(stream));\n                stream.value = this.formatValue(stream.value);\n                this.addChartRow(stream, this.gross);\n                stream.exemptions.forEach(exemption => {\n                    exemption = JSON.parse(JSON.stringify(exemption));\n                    if (exemption.match > 0) {\n                        exemption.match = this.formatValue(exemption.match);\n                        this.addChartRow({\n                            label: exemption.label+' Match', value: exemption.match\n                        }, this.gross);\n                    }\n                });\n            })\n        },\n        // draw line: gross -> taxes\n        // draw line: taxes -> taxes\n        // draw line: taxes -> taxes\n        drawTaxes: function () {\n            this.addChartRow(this.gross, this.tax);\n            this.addChartRow(this.tax, this.tax);\n            this.addChartRow(this.tax, this.tax);\n        },\n        // draw line: gross -> net\n        drawNetIncome: function () {\n            this.addChartRow(this.gross, this.net);\n        },\n        /**************************************************************\n         * Expenses\n         **************************************************************/\n        drawExpensesBreakdown: function () {\n            this.itemizedExpenses.forEach(expense => {\n                expense = JSON.parse(JSON.stringify(expense));\n                expense.value = this.formatValue(expense.value);\n                this.addChartRow(this.net, expense);\n                this.addChartRow(expense, this.expenses);\n            })\n        },\n        /**************************************************************\n         * Investments\n         **************************************************************/\n        drawInvestmentBreakdown: function () {\n            this.drawExemptions();\n            this.itemizedInvestments.forEach(investment => {\n                investment = JSON.parse(JSON.stringify(investment));\n                investment.value = this.formatValue(investment.value);\n                this.addChartRow(this.net, investment);\n                this.addChartRow(investment, this.investments);\n            })\n            this.addChartRow(this.net, this.unallocated);\n            this.addChartRow(this.unallocated, this.unallocated);\n        },\n        drawExemptions: function () {\n            this.itemizedIncomes.forEach(stream => {\n                stream.exemptions.forEach(exemption => {\n                    exemption = JSON.parse(JSON.stringify(exemption));\n                    exemption.value = this.formatValue(exemption.value + exemption.match);\n                    this.addChartRow(this.net, exemption);\n                    this.addChartRow(exemption, this.investments);\n                });\n            })\n        },\n        /**************************************************************\n         * Chart Stuff\n         **************************************************************/\n        addChartRow: function (from, to) {\n            if (from.value == 0 || to.value == 0) return;\n            var append = to.label == from.label ? ' ' : '';\n            let value = Math.min(from.value, to.value);\n            let from_label = from.label + ' (';\n            from_label += this.percent ? from.value + '%' : util.formatMoney(from.value);\n            from_label += ')';\n            let to_label   = to.label   + append + ' (';\n            to_label += this.percent ? to.value + '%' : util.formatMoney(to.value);\n            to_label += ')';\n            this.chart.addRow([from_label, to_label, value]);\n            to.label += append;\n        },\n        viewChart: () => window.scrollTo(0,0),\n        downloadChartTrigger: function () {\n            this.colors = 'source';\n            this.render(true);\n        },\n        downloadChart: function () {\n            window.scrollTo(0,0);\n            html2canvas(document.querySelector(\"#sankey\")).then(canvas => {\n                let uri = canvas.toDataURL();\n                var link = document.createElement(\"a\");\n                link.download = \"sankeycash.png\";\n                link.href = uri;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n            });\n            this.colors = 'gradient';\n            this.render();\n        },\n        getChartStyling: function () {\n            var colors = [\n                '#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f',\n                '#cab2d6', '#ffff99', '#1f78b4', '#33a02c'\n            ];\n            return {\n                sankey: {\n                    node: {\n                        colors: colors,\n                        nodePadding: 7\n                    },\n                    link: {\n                        colorMode: this.colors,\n                        colors: colors\n                    },\n                    iterations: 0,\n                },\n            }\n        },\n        handleScroll: function () {\n            this.atTop = window.scrollY < 300;\n        },\n        formatValue: function (num) {\n            return this.percent ? Math.round(num/this.grossSum*100*10)/10 : num;\n        },\n        toggleMode: function () {\n            this.percent           = document.getElementById('mode-checkbox').checked;\n            this.gross.value       = this.formatValue(this.grossSum);\n            this.net.value         = this.formatValue(this.netSum);\n            this.tax.value         = this.formatValue(this.taxSum);\n            this.unallocated.value = this.formatValue(this.unallocatedSum);\n            this.expenses.value    = this.formatValue(this.expenseSum);\n            this.investments.value = this.formatValue(this.investmentSum);\n            this.render();\n        }\n    }\n}\n</script>\n\n<style scoped>\n#sankey {\n    width: 100%;\n    height:300px;\n}\n\n.btn-group {\n    position:fixed;\n    bottom:0px;\n    left:0px;\n    z-index:10000;\n    border-radius:\n}\n\n.btn-secondary {\n    box-shadow: 0 0 0 .2rem rgba(130,138,145,.5);\n}\n\n.btn-group .btn:first-child {\n    border-radius: 0rem 0rem 0rem 0rem !important;\n}\n.btn-group .btn:last-child {\n    border-radius: 0rem 0.25rem 0rem 0rem !important;\n}\n\n.switch {\n    margin-right:30px;\n}\n\n.btn-secondary {\n    font-weight:bold !important;\n}\n</style>\n\n"]}]}