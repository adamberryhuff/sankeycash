{"remainingRequest":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/adam/Desktop/sankycash/src/components/Incomes/ViewIncomes.vue?vue&type=style&index=0&id=455cc680&scoped=true&lang=css&","dependencies":[{"path":"/home/adam/Desktop/sankycash/src/components/Incomes/ViewIncomes.vue","mtime":1598242072395},{"path":"/home/adam/Desktop/sankycash/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jbGlja2FibGUgewogICAgY3Vyc29yOnBvaW50ZXIKfQouYmFkZ2UgewogICAgZmxvYXQ6cmlnaHQ7CiAgICBtYXJnaW46MnB4Owp9Ci5pbmNvbWUtZGlzcGxheSB7CiAgICB3aWR0aDoxMDAlOwp9Ci5uZXQtaW5jb21lIHsKICAgIHBhZGRpbmctcmlnaHQ6IDEuMjVyZW07Cn0KLm5ldC1pbmNvbWUtYmFkZ2UgewogICAgZmxvYXQ6aW5pdGlhbDsKfQo="},{"version":3,"sources":["ViewIncomes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ViewIncomes.vue","sourceRoot":"src/components/Incomes","sourcesContent":["<template>\n    <div>\n\n        <!-- income streams label -->\n        <label>Income Streams</label>\n\n        <!-- income streams gross, tax, net -->\n        <span class=\"float-right net-income\">\n            <span class=\"badge badge-success badge-pill net-income-badge\">\n                Gross: {{ util.formatMoney(gross) }}\n            </span>\n            -\n            <span class=\"badge badge-success badge-pill net-income-badge\">\n                Tax: {{ util.formatMoney(taxes) }}\n            </span>\n            =\n            <span class=\"badge badge-success badge-pill net-income-badge\">\n                Net: {{ util.formatMoney(net) }}\n            </span>\n        </span>\n\n        <ul class=\"list-group\">\n\n            <!-- no income streams -->\n            <li class=\"list-group-item d-flex justify-content-between align-items-center disabled\" v-if=\"!incomes.length\">\n                You haven't added any income streams yet.\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center clickable\" v-for=\"(income, idx) in incomes\" v-bind:key=\"income.label\" v-on:click=\"removeIncome(idx)\">\n                <div class=\"row no-gutters income-display\">\n                    <div class=\"col-md-4\">\n                        <span id=\"label\">{{ income.label }}</span>\n                    </div>\n                    <div class=\"col-md-8\">\n                        <span class=\"badge badge-primary badge-pill\">\n                            {{ getNetDisplay(income) }}\n                        </span>\n                        <span class=\"badge badge-primary badge-pill\">\n                            {{ getGrossDisplay(income) }}\n                        </span><br>\n                        <span v-for=\"(exemption, idx) in income.exemptions\" v-bind:key=\"idx\">\n                            <span class=\"badge badge-secondary badge-pill\" v-if=\"exemption.match > 0\">\n                                {{ getExemptionMatchDisplay(exemption) }}\n                            </span>&nbsp;\n                            <span class=\"badge badge-secondary badge-pill\" v-if=\"exemption.value > 0\">\n                                {{ getExemptionDisplay(exemption) }}\n                            </span>&nbsp;\n                        </span>\n                        <span class=\"badge badge-secondary badge-pill float-right\">\n                            {{ getIncomeDisplay(income) }}\n                        </span>\n                    </div>\n                </div>\n            </li>\n        </ul>\n        <small class=\"form-text text-muted\">\n            Click on an income stream to remove it.\n        </small>\n    </div>\n</template>\n\n\n<script>\nimport util from '../../util.js';\n\nexport default {\n    name: 'ViewIncomes',\n    props: ['incomes', 'gross', 'taxes', 'net'],\n    data () {\n        return {\n            util: util,\n        }\n    },\n    methods: {\n        removeIncome: function (idx) {\n            if (confirm(\"Are you sure you want to remove this income stream?\")) {\n                this.$emit('removeIncome', idx);\n            }\n        },\n        getTaxableIncome: function (income) {\n            var value = parseInt(income.value);\n            income.exemptions.forEach(exemption => {\n                value -= parseInt(exemption.value);\n            })\n            return value;\n        },\n        getTax: function (income) {\n            let value = parseInt(income.value);\n            value -= income.exemptions.reduce((a, e) => a + parseInt(e.value), 0);\n            return parseInt(value)*(parseInt(income.tax)/100);\n        },\n        getMatch: function (income) {\n            return income.exemptions.reduce((a, e) => a + parseInt(e.match), 0);\n        },\n        getNet: function (income) {\n            return parseInt(income.value) - this.getTax(income) + this.getMatch(income);\n        },\n        getNetDisplay: function (income) {\n            let net = util.formatMoney(this.getNet(income));\n            return `Net: ${net}`;\n        },\n        getGrossDisplay: function (income) {\n            let gross = util.formatMoney(income.value);\n            return `Gross: ${gross}`\n        },\n        getExemptionMatchDisplay: function (exemption) {\n            let match = util.formatMoney(exemption.match);\n            return `${exemption.label} Match: ${match} @ 0%`;\n        },\n        getExemptionDisplay: function (exemption) {\n            let contribution = util.formatMoney(exemption.value);\n            return `${exemption.label}: ${contribution} @ 0%`;\n        },\n        getIncomeDisplay: function (income) {\n            let taxable = util.formatMoney(this.getTaxableIncome(income));\n            let tax     = util.formatTax(income.tax);\n            return `${income.label}: ${taxable} @ ${tax}`;\n        }\n    },\n}\n\n</script>\n\n\n<style scoped>\n.clickable {\n    cursor:pointer\n}\n.badge {\n    float:right;\n    margin:2px;\n}\n.income-display {\n    width:100%;\n}\n.net-income {\n    padding-right: 1.25rem;\n}\n.net-income-badge {\n    float:initial;\n}\n</style>"]}]}