{"remainingRequest":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/adam/Desktop/sankycash/src/components/Incomes/ViewIncomes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/adam/Desktop/sankycash/src/components/Incomes/ViewIncomes.vue","mtime":1599041009495},{"path":"/home/adam/Desktop/sankycash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB1dGlsIGZyb20gJy4uLy4uL3V0aWwuanMnOwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ1ZpZXdJbmNvbWVzJywKICAgIHByb3BzOiBbJ2luY29tZXNJdGVtaXplZCcsICdncm9zc1N1bScsICd0YXhTdW0nLCAnbmV0U3VtJywgJ21vZGUnXSwKICAgIGRhdGEgKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHV0aWw6IHV0aWwsCiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBlZGl0SW5jb21lOiBmdW5jdGlvbiAoaWR4KSB7CiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2VkaXRJbmNvbWUnLCBpZHgpOwogICAgICAgIH0sCiAgICAgICAgZ2V0TmV0RGlzcGxheTogZnVuY3Rpb24gKGluY29tZSkgewogICAgICAgICAgICBsZXQgbmV0ID0gdXRpbC5mb3JtYXRNb25leSh1dGlsLmdldE5ldChpbmNvbWUpLCB0aGlzLm1vZGUpOwogICAgICAgICAgICByZXR1cm4gYE5ldDogJHtuZXR9YDsKICAgICAgICB9LAogICAgICAgIGdldE5ldFRvb2x0aXA6IGZ1bmN0aW9uIChpbmNvbWUpIHsKICAgICAgICAgICAgdmFyIGV4ZW1wdGlvbnMgPSB1dGlsLmZvcm1hdE1vbmV5KHV0aWwuZ2V0RXhlbXB0aW9ucyhpbmNvbWUpLCB0aGlzLm1vZGUpOwogICAgICAgICAgICB2YXIgZGVkdWN0aW9ucyA9IHV0aWwuZm9ybWF0TW9uZXkodXRpbC5nZXREZWR1Y3Rpb25zKGluY29tZSksIHRoaXMubW9kZSk7CiAgICAgICAgICAgIHZhciBtYXRjaCAgICAgID0gdXRpbC5mb3JtYXRNb25leSh1dGlsLmdldE1hdGNoKGluY29tZSksIHRoaXMubW9kZSk7CiAgICAgICAgICAgIHZhciBncm9zcyAgICAgID0gdXRpbC5mb3JtYXRNb25leShpbmNvbWUudmFsdWUsIHRoaXMubW9kZSk7CiAgICAgICAgICAgIHZhciB0YXggICAgICAgID0gdXRpbC5mb3JtYXRNb25leSh1dGlsLmdldFRheChpbmNvbWUpLCB0aGlzLm1vZGUpOwogICAgICAgICAgICB2YXIgdGF4X3JhdGUgICA9IHV0aWwuZm9ybWF0VGF4KGluY29tZS50YXgpOwogICAgICAgICAgICB2YXIgdGF4YWJsZSAgICA9IHV0aWwuZm9ybWF0TW9uZXkodXRpbC5nZXRUYXhhYmxlSW5jb21lKGluY29tZSksIHRoaXMubW9kZSk7CiAgICAgICAgICAgIGxldCBuZXQgICAgICAgID0gdXRpbC5mb3JtYXRNb25leSh1dGlsLmdldE5ldChpbmNvbWUpLCB0aGlzLm1vZGUpOwoKICAgICAgICAgICAgdmFyIHRpcCA9ICcnOwogICAgICAgICAgICBpZiAoaW5jb21lLmV4ZW1wdGlvbnMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICB0aXAgKz0gYEV4ZW1wdGlvbnMgKCR7ZXhlbXB0aW9uc30pID0gYDsKICAgICAgICAgICAgICAgIGluY29tZS5leGVtcHRpb25zLmZvckVhY2goZXhlbXB0aW9uID0+IHsKICAgICAgICAgICAgICAgICAgICB0aXAgKz0gYCR7ZXhlbXB0aW9uLmxhYmVsfSBgOwogICAgICAgICAgICAgICAgICAgIHRpcCArPSBgKCR7dXRpbC5mb3JtYXRNb25leShleGVtcHRpb24udmFsdWUsIHRoaXMubW9kZSl9KSArIGA7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHRpcCA9IHRpcC5zdWJzdHJpbmcoMCwgdGlwLmxlbmd0aC0yKTsKICAgICAgICAgICAgICAgIHRpcCArPSBgPGJyPjxicj5FbXBsb3llZSBNYXRjaCAoJHttYXRjaH0pID0gYAogICAgICAgICAgICAgICAgaW5jb21lLmV4ZW1wdGlvbnMuZm9yRWFjaChleGVtcHRpb24gPT4gewogICAgICAgICAgICAgICAgICAgIHRpcCArPSBgJHtleGVtcHRpb24ubGFiZWx9IGA7CiAgICAgICAgICAgICAgICAgICAgdGlwICs9IGAoJHt1dGlsLmZvcm1hdE1vbmV5KGV4ZW1wdGlvbi5tYXRjaCwgdGhpcy5tb2RlKX0pICsgYDsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGlwID0gdGlwLnN1YnN0cmluZygwLCB0aXAubGVuZ3RoLTIpOwogICAgICAgICAgICAgICAgdGlwICs9IGA8YnI+PGJyPmA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGluY29tZS5kZWR1Y3Rpb25zLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdGlwICs9IGBEZWR1Y3Rpb25zICgke2RlZHVjdGlvbnN9KSA9IGA7CiAgICAgICAgICAgICAgICBpbmNvbWUuZGVkdWN0aW9ucy5mb3JFYWNoKGRlZHVjdGlvbiA9PiB7CiAgICAgICAgICAgICAgICAgICAgdGlwICs9IGAke2RlZHVjdGlvbi5sYWJlbH0gYDsKICAgICAgICAgICAgICAgICAgICB0aXAgKz0gYCgke3V0aWwuZm9ybWF0TW9uZXkoZGVkdWN0aW9uLnZhbHVlLCB0aGlzLm1vZGUpfSkgKyBgOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aXAgPSB0aXAuc3Vic3RyaW5nKDAsIHRpcC5sZW5ndGgtMik7CiAgICAgICAgICAgICAgICB0aXAgKz0gYDxicj48YnI+YDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaW5jb21lLmV4ZW1wdGlvbnMubGVuZ3RoIHx8IGluY29tZS5kZWR1Y3Rpb25zLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdGlwICs9IGBUYXhhYmxlIEluY29tZSAoJHt0YXhhYmxlfSkgPSBHcm9zcyAke2dyb3NzfWA7CiAgICAgICAgICAgICAgICBpZiAoZXhlbXB0aW9ucykgdGlwICs9IGAgLSBFeGVtcHRpb25zICgke2V4ZW1wdGlvbnN9KWA7CiAgICAgICAgICAgICAgICBpZiAoZGVkdWN0aW9ucykgdGlwICs9IGAgLSBEZWR1Y3Rpb25zICgke2RlZHVjdGlvbnN9KWA7CiAgICAgICAgICAgICAgICB0aXAgKz0gYDxicj48YnI+YDsKICAgICAgICAgICAgICAgIHRpcCArPSBgVGF4ICgke3RheH0pID0gVGF4YWJsZSBJbmNvbWUgJHt0YXhhYmxlfSAqIFRheCBSYXRlICgke3RheF9yYXRlfSlgOwogICAgICAgICAgICAgICAgdGlwICs9IGA8YnI+PGJyPmA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIG5ldAogICAgICAgICAgICBpZiAoIWluY29tZS5leGVtcHRpb25zLmxlbmd0aCAmJiAhaW5jb21lLmRlZHVjdGlvbnMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGlwICsgYE5ldCAoJHtuZXR9KSA9IEdyb3NzICgke2dyb3NzfSkgLSBUYXggKCR7dGF4fSlgOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRpcCArPSBgTmV0ICgke25ldH0pID0gVGF4YWJsZSBJbmNvbWUgKCR7dGF4YWJsZX0pIC0gVGF4ICgke3RheH0pYDsKICAgICAgICAgICAgaWYgKGluY29tZS5leGVtcHRpb25zLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdGlwICs9IGAgKyBFeGVtcHRpb25zICgke2V4ZW1wdGlvbnN9KSArIEVtcGxveWVlIE1hdGNoICgke21hdGNofSlgOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aXA7CiAgICAgICAgfSwKICAgICAgICBnZXRHcm9zc0Rpc3BsYXk6IGZ1bmN0aW9uIChpbmNvbWUpIHsKICAgICAgICAgICAgbGV0IGdyb3NzID0gdXRpbC5mb3JtYXRNb25leShpbmNvbWUudmFsdWUsIHRoaXMubW9kZSk7CiAgICAgICAgICAgIHJldHVybiBgR3Jvc3M6ICR7Z3Jvc3N9YAogICAgICAgIH0sCiAgICAgICAgZ2V0RXhlbXB0aW9uRGlzcGxheTogZnVuY3Rpb24gKGV4ZW1wdGlvbikgewogICAgICAgICAgICBsZXQgY29udHJpYnV0aW9uID0gdXRpbC5mb3JtYXRNb25leShleGVtcHRpb24udmFsdWUsIHRoaXMubW9kZSk7CiAgICAgICAgICAgIGxldCBtYXRjaCAgICAgICAgPSB1dGlsLmZvcm1hdE1vbmV5KGV4ZW1wdGlvbi5tYXRjaCwgdGhpcy5tb2RlKTsKICAgICAgICAgICAgcmV0dXJuIGAke2V4ZW1wdGlvbi5sYWJlbH06ICR7Y29udHJpYnV0aW9ufSArICAke21hdGNofSBNYXRjaGA7CiAgICAgICAgfSwKICAgICAgICBnZXRJbmNvbWVEaXNwbGF5OiBmdW5jdGlvbiAoaW5jb21lKSB7CiAgICAgICAgICAgIGxldCB0YXhhYmxlID0gdXRpbC5mb3JtYXRNb25leSh1dGlsLmdldFRheGFibGVJbmNvbWUoaW5jb21lKSwgdGhpcy5tb2RlKTsKICAgICAgICAgICAgbGV0IHRheCAgICAgPSB1dGlsLmZvcm1hdFRheChpbmNvbWUudGF4KTsKICAgICAgICAgICAgcmV0dXJuIGAke2luY29tZS5sYWJlbH06ICR7dGF4YWJsZX0gLSAke3RheH1gOwogICAgICAgIH0sCiAgICAgICAgZ2V0RGVkdWN0aW9uRGlzcGxheTogZnVuY3Rpb24gKGRlZHVjdGlvbikgewogICAgICAgICAgICBsZXQgdmFsdWUgPSB1dGlsLmZvcm1hdE1vbmV5KGRlZHVjdGlvbi52YWx1ZSwgdGhpcy5tb2RlKTsKICAgICAgICAgICAgcmV0dXJuIGAke2RlZHVjdGlvbi5sYWJlbH06ICR7dmFsdWV9YDsKICAgICAgICB9CiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICBuZXRUb29sdGlwICgpIHsKICAgICAgICAgICAgdmFyIHRpcCA9IGBOZXQgKCR7dXRpbC5mb3JtYXRNb25leSh0aGlzLm5ldFN1bSwgdGhpcy5tb2RlKX0pID0gYDsKICAgICAgICAgICAgdGlwICs9IGBHcm9zcyAoJHt1dGlsLmZvcm1hdE1vbmV5KHRoaXMuZ3Jvc3NTdW0sIHRoaXMubW9kZSl9KSAtIGA7CiAgICAgICAgICAgIHRpcCArPSBgVGF4ICgke3V0aWwuZm9ybWF0TW9uZXkodGhpcy50YXhTdW0sIHRoaXMubW9kZSl9KWA7CiAgICAgICAgICAgIHJldHVybiB0aXA7CiAgICAgICAgfQogICAgfSwKfQoK"},{"version":3,"sources":["ViewIncomes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ViewIncomes.vue","sourceRoot":"src/components/Incomes","sourcesContent":["<template>\n    <div>\n\n        <!-- income streams label -->\n        <label>Income Streams</label>\n\n        <!-- income streams gross, tax, net -->\n        <span class=\"float-right net-income\">\n            <span class=\"badge badge-success net-income-badge clickable\">\n                Gross<span class=\"desktop-only-inline\">: {{ util.formatMoney(grossSum, mode) }}</span>\n            </span>\n            <span class=\"badge badge-success net-income-badge clickable pad\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"netTooltip\">\n                Net<span class=\"desktop-only-inline\">: {{ util.formatMoney(netSum, mode) }}</span>\n                &nbsp;\n                <span class=\"fa fa-question-circle\"></span>\n            </span>\n        </span>\n\n        <ul class=\"list-group\">\n\n            <!-- no income streams -->\n            <li class=\"list-group-item d-flex justify-content-between align-items-center disabled\" v-if=\"!incomesItemized.length\">\n                You haven't added any income streams yet.\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center clickable\" v-for=\"(income, idx) in incomesItemized\" v-bind:key=\"income.label\" v-on:click=\"editIncome(idx)\">\n                <div class=\"row no-gutters income-display\">\n                    <div class=\"col-md-4\">\n                        <span id=\"label\">{{ income.label }}</span>\n                    </div>\n                    <div class=\"col-md-8\">\n                        <span class=\"badge badge-primary clickable\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"getNetTooltip(income)\" data-html=\"true\">\n                            {{ getNetDisplay(income) }}\n                            <span class=\"fa fa-question-circle\"></span>\n                        </span>\n                        <span class=\"badge badge-primary\">\n                            {{ getGrossDisplay(income) }}\n                        </span><br>\n                        <span class=\"badge badge-secondary float-right\">\n                            {{ getIncomeDisplay(income) }}\n                        </span>\n                        <span v-for=\"(exemption, idx) in income.exemptions\" v-bind:key=\"idx\">\n                            <span class=\"badge badge-secondary\">\n                                {{ getExemptionDisplay(exemption) }}\n                            </span>&nbsp;\n                        </span>\n                        <span v-for=\"(deduction, idx) in income.deductions\" v-bind:key=\"deduction.label\">\n                            <span class=\"badge badge-secondary\">\n                                {{ getDeductionDisplay(deduction) }}\n                            </span>&nbsp;\n                        </span>\n                    </div>\n                </div>\n            </li>\n        </ul>\n        <small class=\"form-text text-muted\">\n            Click on an income stream to edit or remove it.\n        </small>\n    </div>\n</template>\n\n\n<script>\nimport util from '../../util.js';\n\nexport default {\n    name: 'ViewIncomes',\n    props: ['incomesItemized', 'grossSum', 'taxSum', 'netSum', 'mode'],\n    data () {\n        return {\n            util: util,\n        }\n    },\n    methods: {\n        editIncome: function (idx) {\n            this.$emit('editIncome', idx);\n        },\n        getNetDisplay: function (income) {\n            let net = util.formatMoney(util.getNet(income), this.mode);\n            return `Net: ${net}`;\n        },\n        getNetTooltip: function (income) {\n            var exemptions = util.formatMoney(util.getExemptions(income), this.mode);\n            var deductions = util.formatMoney(util.getDeductions(income), this.mode);\n            var match      = util.formatMoney(util.getMatch(income), this.mode);\n            var gross      = util.formatMoney(income.value, this.mode);\n            var tax        = util.formatMoney(util.getTax(income), this.mode);\n            var tax_rate   = util.formatTax(income.tax);\n            var taxable    = util.formatMoney(util.getTaxableIncome(income), this.mode);\n            let net        = util.formatMoney(util.getNet(income), this.mode);\n\n            var tip = '';\n            if (income.exemptions.length) {\n                tip += `Exemptions (${exemptions}) = `;\n                income.exemptions.forEach(exemption => {\n                    tip += `${exemption.label} `;\n                    tip += `(${util.formatMoney(exemption.value, this.mode)}) + `;\n                });\n                tip = tip.substring(0, tip.length-2);\n                tip += `<br><br>Employee Match (${match}) = `\n                income.exemptions.forEach(exemption => {\n                    tip += `${exemption.label} `;\n                    tip += `(${util.formatMoney(exemption.match, this.mode)}) + `;\n                });\n                tip = tip.substring(0, tip.length-2);\n                tip += `<br><br>`;\n            }\n            if (income.deductions.length) {\n                tip += `Deductions (${deductions}) = `;\n                income.deductions.forEach(deduction => {\n                    tip += `${deduction.label} `;\n                    tip += `(${util.formatMoney(deduction.value, this.mode)}) + `;\n                });\n                tip = tip.substring(0, tip.length-2);\n                tip += `<br><br>`;\n            }\n            if (income.exemptions.length || income.deductions.length) {\n                tip += `Taxable Income (${taxable}) = Gross ${gross}`;\n                if (exemptions) tip += ` - Exemptions (${exemptions})`;\n                if (deductions) tip += ` - Deductions (${deductions})`;\n                tip += `<br><br>`;\n                tip += `Tax (${tax}) = Taxable Income ${taxable} * Tax Rate (${tax_rate})`;\n                tip += `<br><br>`;\n            }\n\n            // net\n            if (!income.exemptions.length && !income.deductions.length) {\n                return tip + `Net (${net}) = Gross (${gross}) - Tax (${tax})`;\n            }\n            tip += `Net (${net}) = Taxable Income (${taxable}) - Tax (${tax})`;\n            if (income.exemptions.length) {\n                tip += ` + Exemptions (${exemptions}) + Employee Match (${match})`;\n            }\n            return tip;\n        },\n        getGrossDisplay: function (income) {\n            let gross = util.formatMoney(income.value, this.mode);\n            return `Gross: ${gross}`\n        },\n        getExemptionDisplay: function (exemption) {\n            let contribution = util.formatMoney(exemption.value, this.mode);\n            let match        = util.formatMoney(exemption.match, this.mode);\n            return `${exemption.label}: ${contribution} +  ${match} Match`;\n        },\n        getIncomeDisplay: function (income) {\n            let taxable = util.formatMoney(util.getTaxableIncome(income), this.mode);\n            let tax     = util.formatTax(income.tax);\n            return `${income.label}: ${taxable} - ${tax}`;\n        },\n        getDeductionDisplay: function (deduction) {\n            let value = util.formatMoney(deduction.value, this.mode);\n            return `${deduction.label}: ${value}`;\n        }\n    },\n    computed: {\n        netTooltip () {\n            var tip = `Net (${util.formatMoney(this.netSum, this.mode)}) = `;\n            tip += `Gross (${util.formatMoney(this.grossSum, this.mode)}) - `;\n            tip += `Tax (${util.formatMoney(this.taxSum, this.mode)})`;\n            return tip;\n        }\n    },\n}\n\n</script>\n\n\n<style scoped>\n.clickable {\n    cursor:pointer\n}\n.badge {\n    float:right;\n    margin:2px;\n}\n.income-display {\n    width:100%;\n}\n.net-income-badge {\n    float:initial;\n}\n\n@media only screen and (min-width: 540px) {\n    .pad {\n        margin-right: calc(0.25rem + 15px);\n    }\n}\n\n\n</style>"]}]}