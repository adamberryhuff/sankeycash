{"remainingRequest":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/adam/Desktop/sankycash/src/components/Incomes/ViewIncomes.vue?vue&type=style&index=0&id=72a5a4dc&scoped=true&lang=css&","dependencies":[{"path":"/home/adam/Desktop/sankycash/src/components/Incomes/ViewIncomes.vue","mtime":1598387129287},{"path":"/home/adam/Desktop/sankycash/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNsaWNrYWJsZSB7CiAgICBjdXJzb3I6cG9pbnRlcgp9Ci5iYWRnZSB7CiAgICBmbG9hdDpyaWdodDsKICAgIG1hcmdpbjoycHg7Cn0KLmluY29tZS1kaXNwbGF5IHsKICAgIHdpZHRoOjEwMCU7Cn0KLm5ldC1pbmNvbWUgewogICAgcGFkZGluZy1yaWdodDogMS4yNXJlbTsKfQoubmV0LWluY29tZS1iYWRnZSB7CiAgICBmbG9hdDppbml0aWFsOwp9Cg=="},{"version":3,"sources":["ViewIncomes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ViewIncomes.vue","sourceRoot":"src/components/Incomes","sourcesContent":["<template>\n    <div>\n\n        <!-- income streams label -->\n        <label>Income Streams</label>\n\n        <!-- income streams gross, tax, net -->\n        <span class=\"float-right net-income\">\n            <span class=\"badge badge-success badge-pill net-income-badge clickable\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"netTooltip\">\n                Net: {{ util.formatMoney(netSum) }}\n                <span class=\"fa fa-question-circle\"></span>\n            </span>\n        </span>\n\n        <ul class=\"list-group\">\n\n            <!-- no income streams -->\n            <li class=\"list-group-item d-flex justify-content-between align-items-center disabled\" v-if=\"!incomesItemized.length\">\n                You haven't added any income streams yet.\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center clickable\" v-for=\"(income, idx) in incomesItemized\" v-bind:key=\"income.label\" v-on:click=\"removeIncome(idx, income)\">\n                <div class=\"row no-gutters income-display\">\n                    <div class=\"col-md-4\">\n                        <span id=\"label\">{{ income.label }}</span>\n                    </div>\n                    <div class=\"col-md-8\">\n                        <span class=\"badge badge-primary badge-pill clickable\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"getNetTooltip(income)\" data-html=\"true\">\n                            {{ getNetDisplay(income) }}\n                            <span class=\"fa fa-question-circle\"></span>\n                        </span>\n                        <span class=\"badge badge-primary badge-pill\">\n                            {{ getGrossDisplay(income) }}\n                        </span><br>\n                        <span v-for=\"(exemption, idx) in income.exemptions\" v-bind:key=\"idx\">\n                            <span class=\"badge badge-secondary badge-pill\" v-if=\"exemption.match > 0\">\n                                {{ getExemptionMatchDisplay(exemption) }}\n                            </span>&nbsp;\n                            <span class=\"badge badge-secondary badge-pill\" v-if=\"exemption.value > 0\">\n                                {{ getExemptionDisplay(exemption) }}\n                            </span>&nbsp;\n                        </span>\n                        <span class=\"badge badge-secondary badge-pill float-right\">\n                            {{ getIncomeDisplay(income) }}\n                        </span>\n                    </div>\n                </div>\n            </li>\n        </ul>\n        <small class=\"form-text text-muted\">\n            Click on an income stream to remove it.\n        </small>\n    </div>\n</template>\n\n\n<script>\nimport util from '../../util.js';\n\nexport default {\n    name: 'ViewIncomes',\n    props: ['incomesItemized', 'unallocatedSum', 'grossSum', 'taxSum', 'netSum'],\n    data () {\n        return {\n            util: util,\n        }\n    },\n    methods: {\n        removeIncome: function (idx, income) {\n            let net = this.getNet(income);\n            if (net > this.unallocatedSum) {\n                alert(`You cannot remove this income stream until you free up at least ${util.formatMoney(net)} into your unallocated budget. You must remove at least ${util.formatMoney(net-this.unallocatedSum)} in expenses or investments before you can remove this income stream.`);\n                return;\n            }\n            if (confirm(\"Are you sure you want to remove this income stream?\")) {\n                this.$emit('removeIncome', idx);\n            }\n        },\n        getTaxableIncome: function (income) {\n            var value = parseInt(income.value);\n            income.exemptions.forEach(exemption => {\n                value -= parseInt(exemption.value);\n            })\n            return value;\n        },\n        getTax: function (income) {\n            let value = parseInt(income.value);\n            value -= income.exemptions.reduce((a, e) => a + parseInt(e.value), 0);\n            return parseInt(value)*(parseInt(income.tax)/100);\n        },\n        getMatch: function (income) {\n            return income.exemptions.reduce((a, e) => a + parseInt(e.match), 0);\n        },\n        getNet: function (income) {\n            return parseInt(income.value) - this.getTax(income) + this.getMatch(income);\n        },\n        getExemptions: function (income) {\n            return income.exemptions.reduce((a, e) => a + parseInt(e.value), 0);\n        },\n        getNetDisplay: function (income) {\n            let net = util.formatMoney(this.getNet(income));\n            return `Net: ${net}`;\n        },\n        getNetTooltip: function (income) {\n            var exemptions = util.formatMoney(this.getExemptions(income));\n            var match = util.formatMoney(this.getMatch(income));\n            var gross = util.formatMoney(income.value);\n            var tax = util.formatTax(income.tax);\n            var taxable = util.formatMoney(this.getTaxableIncome(income));\n\n            var tip = '';\n            if (income.exemptions.length) {\n                tip += `Exemptions (${exemptions}) = `;\n                income.exemptions.forEach(exemption => {\n                    tip += `${exemption.label} `;\n                    tip += `(${util.formatMoney(exemption.value)}) + `;\n                });\n                tip = tip.substring(0, tip.length-2);\n                tip += `<br><br>Employee Match (${match}) = `\n                income.exemptions.forEach(exemption => {\n                    tip += `${exemption.label} `;\n                    tip += `(${util.formatMoney(exemption.match)}) + `;\n                });\n                tip = tip.substring(0, tip.length-2);\n                tip += `<br><br>`;\n                tip += `Taxable Income (${taxable}) = Gross ${gross} - `;\n                tip += `Exemptions (${exemptions})<br><br>`;\n            }\n\n            // net\n            var net = `Gross (${gross}) - Gross (${gross}) * Tax (${tax})`;\n            tip += this.getNetDisplay(income) + ` = `;\n            if (income.exemptions.length) {\n                tip += `Exemptions (${exemptions}) + `;\n                tip += `Employee Match (${match}) + `\n                net = `Taxable Income (${taxable}) - Taxable Income (${taxable}) * `;\n                net += `Tax (${tax})`;\n            }\n            return tip + net;\n        },\n        getGrossDisplay: function (income) {\n            let gross = util.formatMoney(income.value);\n            return `Gross: ${gross}`\n        },\n        getExemptionMatchDisplay: function (exemption) {\n            let match = util.formatMoney(exemption.match);\n            return `${exemption.label} Match: ${match} @ 0%`;\n        },\n        getExemptionDisplay: function (exemption) {\n            let contribution = util.formatMoney(exemption.value);\n            return `${exemption.label}: ${contribution} @ 0%`;\n        },\n        getIncomeDisplay: function (income) {\n            let taxable = util.formatMoney(this.getTaxableIncome(income));\n            let tax     = util.formatTax(income.tax);\n            return `${income.label}: ${taxable} @ ${tax}`;\n        }\n    },\n    computed: {\n        netTooltip () {\n            var tip = `Net (${util.formatMoney(this.netSum)}) = `;\n            tip += `Gross (${util.formatMoney(this.grossSum)}) - `;\n            tip += `Tax (${util.formatMoney(this.taxSum)})`;\n            return tip;\n        }\n    },\n}\n\n</script>\n\n\n<style scoped>\n.clickable {\n    cursor:pointer\n}\n.badge {\n    float:right;\n    margin:2px;\n}\n.income-display {\n    width:100%;\n}\n.net-income {\n    padding-right: 1.25rem;\n}\n.net-income-badge {\n    float:initial;\n}\n</style>"]}]}