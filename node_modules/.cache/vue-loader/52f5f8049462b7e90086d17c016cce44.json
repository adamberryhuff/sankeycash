{"remainingRequest":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/adam/Desktop/sankycash/src/components/Incomes.vue?vue&type=style&index=0&id=392fc0ea&scoped=true&lang=css&","dependencies":[{"path":"/home/adam/Desktop/sankycash/src/components/Incomes.vue","mtime":1598229890949},{"path":"/home/adam/Desktop/sankycash/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmV4ZW1wdGlvbnMgewogICAgcGFkZGluZzowcHggMnB4IDBweCAycHggIWltcG9ydGFudDsKICAgIG1hcmdpbi10b3A6NXB4Owp9Ci5hZGQtZXhlbXB0aW9uIHsKICAgIGN1cnNvcjpwb2ludGVyOwogICAgY29sb3I6ICMwMDdiZmY7CiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKfQouY2xpY2thYmxlIHsKICAgIGN1cnNvcjpwb2ludGVyCn0KLmJhZGdlIHsKICAgIGZsb2F0OnJpZ2h0OwogICAgbWFyZ2luOjJweDsKfQouaW5jb21lLWRpc3BsYXkgewogICAgd2lkdGg6MTAwJTsKfQoubmV0LWluY29tZSB7CiAgICBwYWRkaW5nLXJpZ2h0OiAxLjI1cmVtOwp9Ci5uZXQtaW5jb21lLWJhZGdlIHsKICAgIGZsb2F0OmluaXRpYWw7Cn0K"},{"version":3,"sources":["Incomes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Incomes.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"row\">\n        <!-- title -->\n        <div class=\"col-md-12\">\n            <h2>Income Streams</h2>\n            <p>Input your annual income stream(s) and the tax rate you expect to pay.</p>\n        </div>\n\n        <div class=\"col-md-6\">\n            <AddIncome :incomes=\"incomes\" @addIncome=\"newIncome\" />\n        </div>\n\n        <!-- right side -->\n        <div class=\"col-md-6\">\n            <ViewIncomes :incomes=\"incomes\" @removeIncome=\"deleteIncome\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport util from '../util.js';\nimport AddIncome from './Incomes/AddIncome.vue';\n\nexport default {\n    name: 'Incomes',\n    props: ['incomes', 'gross', 'net', 'taxes'],\n    components: {\n        AddIncome\n    },\n    data () {\n        return {\n            // helper\n            util: util,\n\n            // new income stream\n            label: '',\n            value: '',\n            tax:   '',\n            exemptions: []\n        }\n    },\n    methods: {\n        addIncome: function () {\n            // validate\n            if (!util.isValidChartLabel(this.label, this.incomes)) {\n                alert('Chart labels are required and must be unique.');\n                return;\n            }\n            if (isNaN(this.tax) || this.tax < 0 || this.tax > 100) {\n                alert('Income stream tax rate should be between 0 and 100');\n                return;\n            }\n            if (isNaN(this.value) || this.value <= 0) {\n                alert('Income stream amount must be positive number.');\n                return;\n            }\n\n            // validate exemptions - required, valid labels,\n            // sum of exemptions cannot be greater than income stream total\n            var exemption_total = 0;\n            this.exemptions.forEach(exemption => {\n                if (!util.isValidChartLabel(exemption.label, this.incomes)) {\n                    alert('Chart labels are required and must be unique.');\n                    return;\n                }\n                if (isNaN(exemption.value) || exemption.value < 0) {\n                    alert('Exemption amount must be greater or equal to 0.');\n                    return;\n                }\n                if (isNaN(exemption.match) || exemption.match < 0) {\n                    alert('Exemption match amount must be greater or equal to 0.');\n                    return;\n                }\n                exemption_total += parseInt(exemption.value);\n            })\n            if (exemption_total > this.value) {\n                alert('Exemption amount cannot be more than income stream amount!');\n                return;\n            }\n\n            // add the new stream\n            // this.$emit('addIncome', {\n            //     label: this.label,\n            //     tax: this.tax,\n            //     value: this.value,\n            //     exemptions: this.exemptions\n            // });\n\n            // reset everything in the form\n            this.label      = '';\n            this.tax        = '';\n            this.value      = '';\n            this.exemptions = [];\n        },\n        removeIncome: function (idx) {\n            if (confirm(\"Are you sure you want to remove this income stream?\")) {\n                this.$emit('removeIncome', idx);\n            }\n        },\n        addExemption: function () {\n            this.exemptions.push({ label: '', value: '', match: '' });\n        },\n        getTaxableIncome: function (income) {\n            var value = parseInt(income.value);\n            income.exemptions.forEach(exemption => {\n                value -= parseInt(exemption.value);\n            })\n            return value;\n        },\n        getTax: function (income) {\n            let value = parseInt(income.value) - income.exemptions.reduce((a, e) => a + parseInt(e.value), 0);\n            return parseInt(value)*(parseInt(income.tax)/100);\n        },\n        getMatch: function (income) {\n            return income.exemptions.reduce((a, e) => a + parseInt(e.match), 0);\n        },\n        getNet: function (income) {\n            return parseInt(income.value) - this.getTax(income) + this.getMatch(income);\n        },\n        newIncome: function (income) {\n            this.$emit('addIncome', income);\n        }\n    },\n}\n\n</script>\n\n\n<style scoped>\n.exemptions {\n    padding:0px 2px 0px 2px !important;\n    margin-top:5px;\n}\n.add-exemption {\n    cursor:pointer;\n    color: #007bff;\n    text-decoration: none;\n    background-color: transparent;\n}\n.clickable {\n    cursor:pointer\n}\n.badge {\n    float:right;\n    margin:2px;\n}\n.income-display {\n    width:100%;\n}\n.net-income {\n    padding-right: 1.25rem;\n}\n.net-income-badge {\n    float:initial;\n}\n</style>"]}]}