{"remainingRequest":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/adam/Desktop/sankycash/src/components/Incomes/ViewIncomes.vue?vue&type=style&index=0&id=455cc680&scoped=true&lang=css&","dependencies":[{"path":"/home/adam/Desktop/sankycash/src/components/Incomes/ViewIncomes.vue","mtime":1599041009495},{"path":"/home/adam/Desktop/sankycash/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/adam/Desktop/sankycash/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouY2xpY2thYmxlIHsKICAgIGN1cnNvcjpwb2ludGVyCn0KLmJhZGdlIHsKICAgIGZsb2F0OnJpZ2h0OwogICAgbWFyZ2luOjJweDsKfQouaW5jb21lLWRpc3BsYXkgewogICAgd2lkdGg6MTAwJTsKfQoubmV0LWluY29tZS1iYWRnZSB7CiAgICBmbG9hdDppbml0aWFsOwp9CgpAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDU0MHB4KSB7CiAgICAucGFkIHsKICAgICAgICBtYXJnaW4tcmlnaHQ6IGNhbGMoMC4yNXJlbSArIDE1cHgpOwogICAgfQp9CgoK"},{"version":3,"sources":["ViewIncomes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ViewIncomes.vue","sourceRoot":"src/components/Incomes","sourcesContent":["<template>\n    <div>\n\n        <!-- income streams label -->\n        <label>Income Streams</label>\n\n        <!-- income streams gross, tax, net -->\n        <span class=\"float-right net-income\">\n            <span class=\"badge badge-success net-income-badge clickable\">\n                Gross<span class=\"desktop-only-inline\">: {{ util.formatMoney(grossSum, mode) }}</span>\n            </span>\n            <span class=\"badge badge-success net-income-badge clickable pad\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"netTooltip\">\n                Net<span class=\"desktop-only-inline\">: {{ util.formatMoney(netSum, mode) }}</span>\n                &nbsp;\n                <span class=\"fa fa-question-circle\"></span>\n            </span>\n        </span>\n\n        <ul class=\"list-group\">\n\n            <!-- no income streams -->\n            <li class=\"list-group-item d-flex justify-content-between align-items-center disabled\" v-if=\"!incomesItemized.length\">\n                You haven't added any income streams yet.\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center clickable\" v-for=\"(income, idx) in incomesItemized\" v-bind:key=\"income.label\" v-on:click=\"editIncome(idx)\">\n                <div class=\"row no-gutters income-display\">\n                    <div class=\"col-md-4\">\n                        <span id=\"label\">{{ income.label }}</span>\n                    </div>\n                    <div class=\"col-md-8\">\n                        <span class=\"badge badge-primary clickable\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"getNetTooltip(income)\" data-html=\"true\">\n                            {{ getNetDisplay(income) }}\n                            <span class=\"fa fa-question-circle\"></span>\n                        </span>\n                        <span class=\"badge badge-primary\">\n                            {{ getGrossDisplay(income) }}\n                        </span><br>\n                        <span class=\"badge badge-secondary float-right\">\n                            {{ getIncomeDisplay(income) }}\n                        </span>\n                        <span v-for=\"(exemption, idx) in income.exemptions\" v-bind:key=\"idx\">\n                            <span class=\"badge badge-secondary\">\n                                {{ getExemptionDisplay(exemption) }}\n                            </span>&nbsp;\n                        </span>\n                        <span v-for=\"(deduction, idx) in income.deductions\" v-bind:key=\"deduction.label\">\n                            <span class=\"badge badge-secondary\">\n                                {{ getDeductionDisplay(deduction) }}\n                            </span>&nbsp;\n                        </span>\n                    </div>\n                </div>\n            </li>\n        </ul>\n        <small class=\"form-text text-muted\">\n            Click on an income stream to edit or remove it.\n        </small>\n    </div>\n</template>\n\n\n<script>\nimport util from '../../util.js';\n\nexport default {\n    name: 'ViewIncomes',\n    props: ['incomesItemized', 'grossSum', 'taxSum', 'netSum', 'mode'],\n    data () {\n        return {\n            util: util,\n        }\n    },\n    methods: {\n        editIncome: function (idx) {\n            this.$emit('editIncome', idx);\n        },\n        getNetDisplay: function (income) {\n            let net = util.formatMoney(util.getNet(income), this.mode);\n            return `Net: ${net}`;\n        },\n        getNetTooltip: function (income) {\n            var exemptions = util.formatMoney(util.getExemptions(income), this.mode);\n            var deductions = util.formatMoney(util.getDeductions(income), this.mode);\n            var match      = util.formatMoney(util.getMatch(income), this.mode);\n            var gross      = util.formatMoney(income.value, this.mode);\n            var tax        = util.formatMoney(util.getTax(income), this.mode);\n            var tax_rate   = util.formatTax(income.tax);\n            var taxable    = util.formatMoney(util.getTaxableIncome(income), this.mode);\n            let net        = util.formatMoney(util.getNet(income), this.mode);\n\n            var tip = '';\n            if (income.exemptions.length) {\n                tip += `Exemptions (${exemptions}) = `;\n                income.exemptions.forEach(exemption => {\n                    tip += `${exemption.label} `;\n                    tip += `(${util.formatMoney(exemption.value, this.mode)}) + `;\n                });\n                tip = tip.substring(0, tip.length-2);\n                tip += `<br><br>Employee Match (${match}) = `\n                income.exemptions.forEach(exemption => {\n                    tip += `${exemption.label} `;\n                    tip += `(${util.formatMoney(exemption.match, this.mode)}) + `;\n                });\n                tip = tip.substring(0, tip.length-2);\n                tip += `<br><br>`;\n            }\n            if (income.deductions.length) {\n                tip += `Deductions (${deductions}) = `;\n                income.deductions.forEach(deduction => {\n                    tip += `${deduction.label} `;\n                    tip += `(${util.formatMoney(deduction.value, this.mode)}) + `;\n                });\n                tip = tip.substring(0, tip.length-2);\n                tip += `<br><br>`;\n            }\n            if (income.exemptions.length || income.deductions.length) {\n                tip += `Taxable Income (${taxable}) = Gross ${gross}`;\n                if (exemptions) tip += ` - Exemptions (${exemptions})`;\n                if (deductions) tip += ` - Deductions (${deductions})`;\n                tip += `<br><br>`;\n                tip += `Tax (${tax}) = Taxable Income ${taxable} * Tax Rate (${tax_rate})`;\n                tip += `<br><br>`;\n            }\n\n            // net\n            if (!income.exemptions.length && !income.deductions.length) {\n                return tip + `Net (${net}) = Gross (${gross}) - Tax (${tax})`;\n            }\n            tip += `Net (${net}) = Taxable Income (${taxable}) - Tax (${tax})`;\n            if (income.exemptions.length) {\n                tip += ` + Exemptions (${exemptions}) + Employee Match (${match})`;\n            }\n            return tip;\n        },\n        getGrossDisplay: function (income) {\n            let gross = util.formatMoney(income.value, this.mode);\n            return `Gross: ${gross}`\n        },\n        getExemptionDisplay: function (exemption) {\n            let contribution = util.formatMoney(exemption.value, this.mode);\n            let match        = util.formatMoney(exemption.match, this.mode);\n            return `${exemption.label}: ${contribution} +  ${match} Match`;\n        },\n        getIncomeDisplay: function (income) {\n            let taxable = util.formatMoney(util.getTaxableIncome(income), this.mode);\n            let tax     = util.formatTax(income.tax);\n            return `${income.label}: ${taxable} - ${tax}`;\n        },\n        getDeductionDisplay: function (deduction) {\n            let value = util.formatMoney(deduction.value, this.mode);\n            return `${deduction.label}: ${value}`;\n        }\n    },\n    computed: {\n        netTooltip () {\n            var tip = `Net (${util.formatMoney(this.netSum, this.mode)}) = `;\n            tip += `Gross (${util.formatMoney(this.grossSum, this.mode)}) - `;\n            tip += `Tax (${util.formatMoney(this.taxSum, this.mode)})`;\n            return tip;\n        }\n    },\n}\n\n</script>\n\n\n<style scoped>\n.clickable {\n    cursor:pointer\n}\n.badge {\n    float:right;\n    margin:2px;\n}\n.income-display {\n    width:100%;\n}\n.net-income-badge {\n    float:initial;\n}\n\n@media only screen and (min-width: 540px) {\n    .pad {\n        margin-right: calc(0.25rem + 15px);\n    }\n}\n\n\n</style>"]}]}